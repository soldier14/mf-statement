name: Test & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Install Ginkgo CLI
      run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

    - name: Run tests with coverage
      run: |
        echo "Running test suite with coverage..."
        make coverage
        echo "Tests and coverage completed"

    - name: Check coverage thresholds
      run: |
        echo "Checking coverage thresholds..."

        # Extract total coverage from the filtered coverage file
        TOTAL_COVERAGE=$(go tool cover -func=coverage/coverage_filtered.out | grep "total:" | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${TOTAL_COVERAGE}%"

        # Calculate test coverage using the same filtered approach as Makefile
        go test -cover -coverprofile=coverage/coverage.out ./internal/... -covermode=count
        grep -v "internal/util/logger.go" coverage/coverage.out > coverage/coverage_filtered.out
        TEST_COVERAGE=$(go tool cover -func=coverage/coverage_filtered.out | grep "total:" | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${TEST_COVERAGE}%"

        # Check if total coverage meets requirements
        if (( $(echo "$TOTAL_COVERAGE >= 80" | bc -l) )); then
          echo "Total coverage (${TOTAL_COVERAGE}%) meets requirement (≥80%)"
        else
          echo "Total coverage (${TOTAL_COVERAGE}%) below requirement (≥80%)"
          exit 1
        fi

        # Check if test coverage meets requirements (using same value as total coverage)
        if (( $(echo "$TEST_COVERAGE >= 80" | bc -l) )); then
          echo "Test coverage (${TEST_COVERAGE}%) meets requirement (≥80%)"
        else
          echo "Test coverage (${TEST_COVERAGE}%) below requirement (≥80%)"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');

          // Get coverage from the filtered coverage file using go tool
          let coveragePercent = '0';
          try {
            const coverageOutput = execSync('go tool cover -func=coverage/coverage_filtered.out | grep "total:"', { encoding: 'utf8' });
            const match = coverageOutput.match(/(\d+\.\d+)%/);
            if (match) {
              coveragePercent = match[1];
            }
          } catch (error) {
            console.log('Error getting coverage:', error.message);
          }

          const comment = `## Coverage Report

          **Total Coverage:** ${coveragePercent}%

          ${parseFloat(coveragePercent) >= 80 ? '✅' : '❌'} Coverage ${parseFloat(coveragePercent) >= 80 ? 'meets' : 'does not meet'} requirements (≥80%)

          <details>
          <summary>View detailed coverage report</summary>

          \`\`\`
          ${fs.existsSync('coverage/coverage_filtered.out') ? fs.readFileSync('coverage/coverage_filtered.out', 'utf8') : 'Coverage file not found'}
          \`\`\`
          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
